services:
  # Redis/Key Value instance for rate limiting and caching
  - type: redis
    name: productivityflow-redis
    ipAllowList: [] # only allow internal connections
    plan: free # free tier for development, upgrade to starter for production
    maxmemoryPolicy: allkeys-lru # good for caching use cases

  # Main Flask web service
  - type: web
    name: productivityflow-backend-v3
    runtime: python
    buildCommand: "cd backend && pip install -r requirements.txt"
    startCommand: "cd backend && gunicorn -c gunicorn.conf.py application:application"
    healthCheckPath: "/health"
    envVars:
      - key: FLASK_ENV
        value: production
      - key: ENABLE_RATE_LIMITING
        value: "true"
      - key: REDIS_URL
        fromService:
          type: redis
          name: productivityflow-redis
          property: connectionString
      - key: SECRET_KEY
        generateValue: true
      - key: JWT_SECRET_KEY
        generateValue: true
      - key: ENCRYPTION_KEY
        generateValue: true
      # Add your other environment variables here
      # - key: STRIPE_SECRET_KEY
      #   sync: false
      # - key: ANTHROPIC_API_KEY
      #   sync: false
      # - key: DATABASE_URL
      #   fromDatabase:
      #     name: your-database-name
      #     property: connectionString